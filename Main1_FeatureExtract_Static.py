'''
Created on 2017/7/17

@author: ful6ru04

additional required:
1.  tool name: more_itertools
    install: pip install more_itertools
2.  tool name: h5py
    install: pip install h5py

'''
import os
import numpy as np
import matplotlib.pyplot as plt
from  more_itertools import unique_everseen

from Apps.Permission import Permission as ps

if __name__ == '__main__':
    
    ###################################################################################################
    # Input file
    path_mal = './src/Malware_Static.csv' # malware
    path_ben = './src/Benign_Static.csv' # benign
    
    # Output file
    output_dir = './output-1'
    output_np_name = 'feature_static.npz'
    output_map_name = 'featureDistMap_static.png'
    output_attr_name = 'attrList_static.txt'
    ###################################################################################################
    
    ### 1. Check if output directory exists
    if not os.path.exists(output_dir):
        os.mkdir(output_dir)
    
    # read all attribute from csv file
    attr_list = ps.read(path_mal) + ps.read(path_ben)
    print( 'Length of permission vector: ' + str(len(attr_list)) )
    
    ### 2. Filter out duplicate permissions
    attr_list = list(unique_everseen(attr_list))
    print( 'There are ' + str(len(attr_list)) + ' different kinds of permissions after filter out duplicate ones' )
    
    with open(os.path.join(output_dir, output_attr_name), 'w') as stream: # write out to file
        for attr in attr_list:
            stream.write(attr+'\n')
    print('The permissions used are list at the "' + os.path.join(output_dir, output_attr_name) + '"')
    
    ### 3. Read apps and generate attribute dictionary
    malDict, _ = ps.readIntoDict(path_mal, attr_list)
    norDict, _ = ps.readIntoDict(path_ben, attr_list)
    
    ### 4. Convert dictionary to np array
    np_mal = np.zeros( (len(malDict), len(attr_list)), dtype=np.float32)
    np_ben = np.zeros( (len(norDict), len(attr_list)), dtype=np.float32)
    print('Initialize malware apps feature array size: ' + str(np_mal.shape))
    print('Initialize normal  apps feature array size: ' + str(np_ben.shape))
    
    ### 5. Assign dict of each app to array
    for a in range( len(attr_list) ):
        for i in range( len(malDict) ): # (malware)
            np_mal[i,a] = malDict[i].pop(attr_list[a])
        for i in range( len(norDict) ): # (benign)
            np_ben[i,a] = norDict[i].pop(attr_list[a])
    
    ### 6. Show results
    fig = plt.figure(figsize=(2,7),dpi=250)
    ax1 = fig.add_subplot(211)
    ax2 = fig.add_subplot(212)
    ax1.tick_params(axis='x', labelsize=4)
    ax2.tick_params(axis='x', labelsize=4)
    ax1.tick_params(axis='y', labelsize=4)
    ax2.tick_params(axis='y', labelsize=4)
    ax1.imshow( np_mal )
    ax2.imshow( np_ben )
    ax1.set_title("Malware feature distribution", fontsize=4)
    ax2.set_title("Normal feature distribution", fontsize=4)
    ax2.set_xlabel('# permission', fontsize=4)
    ax1.set_ylabel('# app', fontsize=4)
    ax2.set_ylabel('# app', fontsize=4)
    print('Feature map is saved at: "' + os.path.join(output_dir,output_map_name) + '"')
    plt.savefig(os.path.join(output_dir,output_map_name), transparent=True)
    
    ### 7. Write features vector to file
    path = os.path.join(output_dir, output_np_name)
    np.savez(path, npStMal=np_mal, npStBen=np_ben)
    print('Feature extraction done! Saved at "' + path + '"')
    
    #plt.show() # will block the script running so put it at the end of the script
    