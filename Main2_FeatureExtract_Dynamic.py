'''
Created on 2017/8/21

@author: ful6ru04

additional required:
1.  tool name: more_itertools
    install: pip install more_itertools
2.  tool name: h5py
    install: pip install h5py

'''
import os
import numpy as np
import matplotlib.pyplot as plt

from Apps.Permission import Permission as ps

if __name__ == '__main__':
    
    ###################################################################################################
    # Input file
    path_mal = './src/Malware_Dynamic.csv'
    path_ben = './src/Benign_Dynamic.csv'
    
    # Output file
    output_dir = './output-1'
    output_np_name = 'feature_dynamic.npz'
    output_map_name = 'featureDistMap_dynamic.png'
    output_attr_name = 'attrList_dynamic.txt'
    ###################################################################################################
    
    ### 1. Check if output directory exists
    if not os.path.exists(output_dir):
        os.mkdir(output_dir)
    
    ### 2. Read all attribute from csv file
    attr_list_mal = ps.readArrayCsv(path_mal)
    attr_list_ben = ps.readArrayCsv(path_ben)
    print( 'Number of malware Apps: ' + str(len(attr_list_mal)) )
    print( 'Number of normal Apps: ' + str(len(attr_list_ben)) )
    print( 'Length of fature vector of each malware app: ' + str(len(attr_list_mal[0])) )
    print( 'Length of fature vector of each normal app: ' + str(len(attr_list_ben[0])) )
    
    ### 3. Convert list of list to np array
    np_mal = np.array(attr_list_mal, dtype=np.float32)
    np_ben = np.array(attr_list_ben, dtype=np.float32)
    
    ### 4. Show results
    fig = plt.figure(figsize=(6,6),dpi=300)
    ax1 = fig.add_subplot(121)
    ax2 = fig.add_subplot(122)
    ax1.tick_params(axis='y', labelsize=11)
    ax2.tick_params(axis='y', labelsize=11)
    ax1.get_xaxis().set_ticks([])
    ax2.get_xaxis().set_ticks([])
    ax1.imshow( np_mal )
    ax2.imshow( np_ben )
    ax1.set_title("Malware feature distribution", fontsize=11)
    ax2.set_title("Normal feature distribution", fontsize=11)
    ax1.set_xlabel('# permission count', fontsize=11)
    ax2.set_xlabel('# permission count', fontsize=11)
    ax1.set_ylabel('# app', fontsize=11)
    print('Feature map is saved at: "' + os.path.join(output_dir,output_map_name) + '"')
    plt.savefig(os.path.join(output_dir,output_map_name), transparent=True)
    
    ### 5. Write features vector to file
    path = os.path.join(output_dir, output_np_name)
    np.savez(path, npDyMal=np_mal, npDyBen=np_ben)
    print('Feature extraction done! Saved at "' + path + '"')
    
    #plt.show() # will block the script running so put it at the end of the script
    